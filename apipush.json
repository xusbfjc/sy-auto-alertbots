import PImage from "pureimage";

const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;
const TG_CHAT_ID = process.env.TG_CHAT_ID;

// === 绘制 Binance 风格卡片 ===
async function drawCard(data) {
  const W = 800, H = 450;
  const img = PImage.make(W, H);
  const ctx = img.getContext("2d");

  // 样式颜色
  const bg = "#1A1A1A";
  const binanceYellow = "#FCD535";
  const green = "#00D1B3";
  const red = "#FF4E4E";
  const pnlGreen = "#00FF99";
  const gray = "#888888";

  // 背景
  ctx.fillStyle = bg;
  ctx.fillRect(0, 0, W, H);

  // 标题 Binance
  ctx.fillStyle = binanceYellow;
  ctx.font = "32pt sans";
  ctx.fillText("Binance Futures", 40, 60);

  // 方向 + 杠杆 + 币种
  const side = data.direction || "-";
  const lev = data.leverage ? ` | ${data.leverage}` : "";
  const sym = (data.symbol || "") + " 永续";
  ctx.fillStyle = side === "空" ? red : green;
  ctx.font = "22pt sans";
  ctx.fillText(`${side}${lev} | ${sym}`, 40, 110);

  // 收益率
  if (data.pnl_percent) {
    ctx.fillStyle = pnlGreen;
    ctx.font = "bold 56pt sans";
    ctx.fillText(data.pnl_percent, 40, 190);
  }

  // 开仓价 / 最新价
  ctx.fillStyle = binanceYellow;
  ctx.font = "20pt sans";
  if (data.entry_price) ctx.fillText(`开仓价格   ${data.entry_price}`, 40, 250);
  if (data.price) ctx.fillText(`最新价格   ${data.price}`, 40, 290);

  // 时间
  ctx.fillStyle = gray;
  ctx.font = "16pt sans";
  const ts = data.ts || new Date().toISOString();
  ctx.fillText(`${ts}`, 40, 330);

  // Footer
  ctx.fillStyle = gray;
  ctx.font = "16pt sans";
  const footer = "SY Auto Push";
  const w = ctx.measureText(footer).width;
  ctx.fillText(footer, W - w - 40, H - 40);

  // 输出 buffer
  return new Promise((resolve, reject) => {
    const chunks = [];
    const stream = {
      writable: true,
      write: buf => chunks.push(Buffer.from(buf)),
      end: () => resolve(Buffer.concat(chunks)),
      on: () => {},
      once: () => {}
    };
    PImage.encodePNGToStream(img, stream).catch(reject);
  });
}

// === Telegram 推送 ===
export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).json({ error: "Use POST" });

  try {
    const data = req.body || {};
    const caption = `📊 ${data.symbol || "未知"}\n方向: ${data.direction}\n开仓价: ${data.entry_price}\n现价: ${data.price}\n收益率: ${data.pnl_percent}`;
    const buffer = await drawCard(data);

    const url = `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendPhoto`;
    const form = new FormData();
    form.append("chat_id", TG_CHAT_ID);
    form.append("caption", caption);
    form.append("photo", new Blob([buffer], { type: "image/png" }), "card.png");

    const resp = await fetch(url, { method: "POST", body: form });
    const json = await resp.json();
    if (!json.ok) throw new Error(JSON.stringify(json));

    res.status(200).json({ ok: true, result: json.result });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
}
